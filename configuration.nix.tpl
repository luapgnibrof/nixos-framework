{ config, pkgs, ... }:

{
  imports = [
    ./hardware-configuration.nix
    ./home-manager.nix
  ];

  networking.hostName = "__HOSTNAME__";

  # Bootloader (UEFI) + allow touching NVRAM
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Full-disk LUKS (the installer script writes this UUID)
  boot.initrd.luks.devices.luksroot = {
    device = "/dev/disk/by-uuid/__CRYPT_UUID__";
    preLVM = true;
  };

  # Filesystems are in hardware-configuration.nix (generated by installer).
  # We mounted with Btrfs subvols: @, @home, @nix, @swap (compress=zstd).

  # Swap file created by setup.sh
  swapDevices = [
    { device = "__SWAPFILE__"; }
  ];

  # ---------- Desktop & hardware ----------
  services.xserver.enable = true;
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma6.enable = true;

  # PipeWire audio stack
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    pulse.enable = true;
    jack.enable = true;
  };

  # NetworkManager for Wi-Fi/ethernet
  networking.networkmanager.enable = true;

  # Intel firmware/microcode (Framework)
  hardware.cpu.intel.updateMicrocode = true;
  hardware.enableRedistributableFirmware = true;

  # Power management niceties
  services.power-profiles-daemon.enable = true;
  powerManagement.powertop.enable = true;

  # ---------- System-wide apps & services (suggested) ----------
  environment.systemPackages = with pkgs; [
    # Core CLI
    curl wget git vim
    htop btop jq yq ripgrep fd bat tree fzf eza
    # System utils
    pciutils usbutils brightnessctl fastfetch btrfs-progs
    parted cryptsetup rsync unzip zip
    # Browsers/editors (optional system-wide install; also fine via HM)
    chromium
  ];

  # Printing & discovery
  services.printing.enable = true;
  services.avahi.enable = true;  # mDNS/Bonjour for printer discovery

  # Firmware updates
  services.fwupd.enable = true;

  # VPN
  services.tailscale.enable = true;

  # Containers (pick Podman; switch to Docker if you prefer)
  virtualisation.podman.enable = true;
  virtualisation.podman.dockerCompat = true;  # `docker` CLI -> podman
  # virtualisation.docker.enable = true;      # (disable Podman if you enable this)

  # Flatpak (optional but handy)
  services.flatpak.enable = true;

  # Desktop portals (Flatpak/KDE integration)
  xdg.portal.enable = true;
  xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-kde ];

  # OpenSSH (optional remote access)
  services.openssh.enable = false;  # set to true if you want SSH server

  # Steam (handles 32-bit libs & workarounds)
  programs.steam.enable = true;  # installs Steam system-wide
  # Docs: search.nixos.org option "programs.steam.enable"

  # KDE Connect (opens TCP/UDP 1714â€“1764 automatically)
  programs.kdeconnect.enable = true;

  # ---------- Users ----------
  users.users."__USERNAME__" = {
    isNormalUser = true;
    description = "__USERNAME__";
    extraGroups = [ "wheel" "networkmanager" "video" ];
    shell = pkgs.zsh;
  };
  programs.zsh.enable = true;

  # sudo for wheel
  security.sudo.enable = true;
  security.sudo.wheelNeedsPassword = true;

  # ---------- Nix quality-of-life ----------
  nixpkgs.config.allowUnfree = true;
  nix.settings = {
    auto-optimise-store = true;
    experimental-features = [ "nix-command" "flakes" ];
  };
  nix.gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 14d";
  };

  # ---------- Locale / time ----------
  time.timeZone = "America/Indiana/Indianapolis";
  i18n.defaultLocale = "en_US.UTF-8";

  # Match to the ISO/release you install with
  system.stateVersion = "24.11";
}
